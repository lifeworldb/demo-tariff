import { Controller, Inject } from '@nestjs/common';
import { PinoLogger } from 'nestjs-pino';
import { GrpcMethod } from '@nestjs/microservices';
import { IResponse } from '@commons/interfaces/response.interface';
import { TAllArgs } from '@commons/types/args.types';
import { TariffConfService } from './tariff-conf.service'
import { TariffConf } from './tariff-conf.model'
import { NewTariffConf } from './dto/tariff-conf.types'

/**
 * Controller of gRPC services for TariffConf services.
 */
@Controller('tariff-conf')
export class TariffConfController {
  /**
   * The constructor of the class receives by injection the service to be invoked and the instance of the logger.
   * @param service Injection of the service instance.
   * @param logger Injection of the logger instance.
   */
  constructor(
    @Inject(TariffConfService)
    private readonly service: TariffConfService,
    private readonly logger: PinoLogger
  ) {
    logger.setContext(TariffConfController.name);
  }

  /**
   * Controller method in charge of invoking the tariffsConf method in the injected service.
   *
   * This invocation will be generated by a call from the gRPC client.
   * @param data Data received from the client which correspond to the TAllArgs type
   * @return Promise<{ tariffsConf: TariffConf[] }> Returns an object with an array of rate settings.
   */
  @GrpcMethod('TariffService')
  async tariffsConf(data: TAllArgs): Promise<{ tariffsConf: TariffConf[] }> {
    this.logger.info('TariffConfController#tariffsConf.call %o', data);
    const res = await this.service.allTariffConf(data);
    return Promise.resolve({ tariffsConf: res });
  }

  /**
   * Controller method in charge of invoking the create method in the injected service.
   *
   * This invocation will be generated by a call from the gRPC client.
   * @param data Data received from the client which correspond to the NewTariffConf structure
   * @return Promise<IResponse> Returns a response of type IResponse to indicate the resulting status.
   */
  @GrpcMethod('TariffService')
  async createConf(data: NewTariffConf): Promise<IResponse> {
    this.logger.info('TariffConfController#create.call %o', data);
    return this.service.create(data);
  }
}
